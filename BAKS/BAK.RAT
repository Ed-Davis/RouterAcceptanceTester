#!/usr/bin/perl -w -I /RAT/Tools/

#Initialise block
BEGIN {
use lib "/RAT/Tools";
use lib "/RAT";
use v5.10;
}
use strict;

use Net::Ping;
use Time::HiRes qw(usleep);
use WWW::Mechanize;
use WWW::Mechanize::FormFiller;
use URI::URL;
use Net::FTP;
require LWP::UserAgent;
use RatLed;

my $router='192.168.0.1'; 
my $bbc='212.58.241.131'; 
my $cnt='0';
my $var_sky_ssid = ('var sky_ssid = ');
my $varwpaPskKey = ('var wpaPskKey = ');
my $model=("_");  
my $pass_or_fail=('Pass');
my $wifitest=('WiFi Not Tested');
my $router_gui=("GUI Not Tested");
my $wantest=();
my $dnstest=("Skipped");
my $ssid=("_");
my $datechecked=(0);
my ($user,$password)=('admin','sky');
my $tablestart=('<td>');
my $tableend=('</td>');
my $manstart=('<th width="35%">Manufacturer</th>');
my $marker=(0);
my $ethernetInfo=('cat /sys/class/net/eth0/operstate');
my $wlanInfo=('cat /sys/class/net/wlan0/operstate');
my $deviceID=('RAT 1');

my ($uptime, $pid, $lastpid, $passkey, $rspage, $response, $nextstuff, 
	$manufacturer, $router_fw, $adsl_fw, $mac_lan, $filename, $eth0state, 
	$wlan0state, $heading, $timeout, @pids, @content);

my $agent = WWW::Mechanize->new( autocheck => 1 );
my $formfiller = WWW::Mechanize::FormFiller->new();

my $p = Net::Ping->new();

package RAT;

sub Start	{

RatLed->StartupSeq(); 
system('ifup eth0');

}

sub waitForRouter	{ 

if ($marker==0)	{  			
			RatLed->Clear();
			$pid=(RatLed->Breathe());	
			$marker++;
			open RESOLV, ">/etc/resolv.conf";
my $resolve=<<RESOLV;
domain Home
search Home
nameserver 192.168.0.1
RESOLV
print RESOLV $resolve;
}		
	
	if ($p->ping($router, 2))  {   
			$p->close();
			$marker=("0");
	 		system ("kill $pid");
			RatLed->Clear();
			return "connected";

  		}		else		{
    	
    		$p->close();
			sleep (1);
			waitForRouter();  
}


sub wanCheck { 

			$pid=(RatLed->TestInProg());
			push (@pids, "$pid ");
			$pid=(RatLed->LocalPass());
			push (@pids, "$pid ");
    if ($p->ping($bbc, 3))  { 
    	sleep (1);
    	$p->close(); 

	system ("kill $pid");
	RatLed->Clear();
	return "wanconnected";

			}	else	{    
    	$p->close();
		$marker=(0);
		return "no wanavailable";
	}
}

sub checkRouter	{
				my $hashed_report;
				my @report;
				my $date=`date`;
				chomp $date;
				push (@report, "Date: $date");
				my $lanport=('LAN Port');
				my $macstart=('MAC Address');
				my $doc_w=('document.write');
				my $modstart=('>Model</'); 
				my $rfw='Firmware Version';	
				$agent->env_proxy();	
				$agent->credentials($user, $password);
				$agent->get('http://192.168.0.1/sky_index.html');
				$agent->form_number(1) if $agent->forms and scalar @{$agent->forms};
				$agent->get('http://192.168.0.1/sky_router_status.html');
				$agent->form_number(1) if $agent->forms and scalar @{$agent->forms};
				$rspage=($agent->content);
				@content=($rspage);
				$router_gui=("Router GUI: Responding and credentials correct");		
				$hashed_report -> {'Router GUI:'} = 'Responding and credentials correct';
			if ($rspage=~(m/$manstart\s|\S/g))	{
					my $nextstuff=$';
			if ($nextstuff=~m/\>(\w{1,5})/) {
				($manufacturer)=$1;
				push (@report, "Manufacturer: $manufacturer");
				$hashed_report -> {'Manufacturer:'} = $manufacturer;
				}
			}
				
			if ($rspage=~(m/$modstart\s|\S/g))	{
					my $nextstuff=$';
			if ($nextstuff=~m/(SR[0-9]{3})/) {
				($model)=$1;
				push (@report, "Model: $model");
				$hashed_report -> {'Model:'} = $model;
				}
			}
			 
			if ($rspage=~(m/$rfw<\/\w{1,}>\s{0,}<\w{1,}>/))	{
					my $nextstuff=$';
			if ($nextstuff=~m/^\s{0,}(.{1,})\s|\n$/g) {	
				($router_fw)=$1;
				$router_fw=~(s/<\/td>//sg);
				push (@report, "Firmware Version: $router_fw");
				$hashed_report -> {'Firmware Version:'} = $router_fw;
				}
			}
			
			if ($rspage=~(m/($lanport[.]{1,}$macstart)[.]{1,}$doc_w[.]{1,}/sg))	{
					my $nextstuff=$';
			if ($nextstuff=~m/(\S{2}:\S{2}:\S{2}:\S{2}:\S{2}:\S{2})/si) {
					($mac_lan)=$1;
				push (@report, "MAC Address: $mac_lan");
				$hashed_report -> {'MAC Address:'} = $mac_lan;
				}
			}
				
		$agent->get('http://192.168.0.1/sky_wireless_settings.html');
		$agent->form_number(1) if $agent->forms and scalar @{$agent->forms};	
		my @lines=($agent->content);
				foreach my $line(@lines)	{
			if ($line=~(/$var_sky_ssid['](\S{1,})[']/))  {
				($ssid)=$1;
				push (@report, "Router Name (SSID): $ssid");
				$hashed_report -> {'Router Name (SSID):'} = $ssid;	
					}
					if ($line=~(/$varwpaPskKey['](\S{1,})[']/))  {
								($passkey)=$1;
				}
			}
			
				push (@report, $router_gui);
if ($router_gui)	{

open WPA, "+>/etc/wpa_supplicant.conf";			
my $supplicant_file=<<WPASUPPLICANT;
ctrl_interface=/run/wpa_supplicant/
network={
	ssid="$ssid"
	psk="$passkey"
}
WPASUPPLICANT

	print WPA $supplicant_file;
	close WPA;
	push (@report, "Wireless credentials gathered successfully");
		}		
	my $self=\@report;
	#my %hash = %$hashed_report;
	return $hashed_report;
	#return $self;
	}
}

sub checkWLAN	{
			our (@report);
			system ("ifdown eth0");
			system ("ifup wlan0");	
			RatLed->Clear();
			killer();
			$pid=(RatLed->WirelessTestInProg());
			push (@pids, "$pid ");
			$pid=(RatLed->RemotePass());		
			push (@pids, "$pid ");
			sleep (1);

use Time::Out qw(timeout);
timeout 60 => sub {
	if ($p->ping($router, 5))  {   
					killer();	
    				$pid=(RatLed->WirelessPass());
    				push (@pids, "$pid ");
    				$pid=(RatLed->TestInProg());
					push (@pids, "$pid ");    				
					$p->close();
					$pass_or_fail=('Pass');
					$wifitest="WiFi Connection Check (using DHCP): Successful";
					push (@report, $wifitest);
					interface_return();
					}
} ;
if ($@){				
		$wifitest=("Wifi Connection Check (using DHCP):	Failed");
    	$pass_or_fail=('Fail');	
    	push (@report, $wifitest);
    	interface_return();
	}
	my $self=\@report;
	return $self;
}

sub interface_return	{
		$eth0state = `$ethernetInfo`;
		$wlan0state = `$wlanInfo`; 
		chomp $eth0state;
		chomp $wlan0state;
		system('ifdown wlan0');
		system('pkill wpa_supplicant');
		system("rm /run/wpa_supplicant/*");
		if ($eth0state eq 'down')	{
		system('ifup eth0 -o OPTION=allow-hotplug');
		}
}


sub killer	{
			if (@pids)	{
			foreach my $process(@pids)	{
			system("kill $process");
			}
			@pids=();
			$pid=();
			} elsif	($pid)	{
			system("kill $pid");
			$pid=();
		}
}

1;
